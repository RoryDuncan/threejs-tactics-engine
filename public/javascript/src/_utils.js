
/*
      utilities
*/


(function() {
  var EventEmitter,
    __slice = [].slice;

  module.exports.log = function(msg) {
    var prefix;
    this.logs.unshift(msg);
    if (!this.debug) {
      return;
    }
    prefix = "Engine :: ";
    if (typeof msg === "string") {
      console.log(prefix + msg);
    } else {
      console.log(msg);
    }
  };

  module.exports.extend = function() {
    var base, extended, key, obj, objs, _i, _len;
    objs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (objs.length < 2) {
      return objs[0];
    }
    extended = objs[0];
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      base = obj;
      for (key in base) {
        extended[key] = base[key];
      }
    }
    return extended;
  };

  module.exports.isArray = Array.isArray || function(thing) {
    return Object.prototype.toString.call(thing === "[object Array]");
  };

  module.exports.pythag = window.Math.pythag = function(A, B, hypotenuse) {
    var a2, b2, result;
    if (!(arguments.length >= 2)) {
      return;
    }
    if (B === null) {
      result = (Math.pow(hypotenuse, 2)) - Math.pow(A, 2);
      result = Math.sqrt(result);
      return result;
    } else {
      a2 = Math.pow(A, 2);
      b2 = Math.pow(B, 2);
      result = Math.sqrt(a2 + b2);
      return result;
    }
  };

  module.exports.getJSON = function(url, callbacks) {
    var ajax, data, options;
    options = callbacks || {};
    data = void 0;
    ajax = $.getJSON(url);
    return ajax.complete(function() {
      try {
        data = $.parseJSON(ajax.responseText);
      } catch (e) {
        options.error.call(options.scope || null, e, ajax);
        return;
      }
      options.success.call(options.scope || null, data, ajax);
    });
  };

  module.exports.EventEmitter = EventEmitter = (function() {

    function EventEmitter() {}

    EventEmitter.prototype.events = {};

    EventEmitter.prototype.on = function(name, fn) {
      this.events[name] = fn;
      return this;
    };

    EventEmitter.prototype.off = function(name) {
      delete this.events[name];
      return this;
    };

    EventEmitter.prototype.get = function(name) {
      return this.events[name];
    };

    EventEmitter.prototype.trigger = function(name) {
      var fn;
      fn = this.get(name);
      if (fn === void 0) {
        return;
      }
      fn.call();
      return this;
    };

    return EventEmitter;

  })();

}).call(this);

// Generated by CoffeeScript 1.5.0-pre
