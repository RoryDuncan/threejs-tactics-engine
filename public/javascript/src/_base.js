
/*
    three-js Tactics Engine
*/


(function() {
  var Clock, Stage, ThreeTacticsEngine, utils;

  console.log("_base");

  utils = require("./_utils");

  Stage = require("./_stage");

  Clock = require("./_clock");

  ThreeTacticsEngine = function() {
    /*
      @PRIVATES
    */

    var THREE, configLoaded, eventMethods, name, _i, _len;
    if (self.THREE === void 0 || self.$ === void 0) {
      throw new Error("The engine is dependent on THREE.js and jQuery, which one of was not found, or not in the global scope.");
    }
    THREE = self.THREE;
    configLoaded = false;
    /*
      @PUBLICS
    */

    this.load = function() {};
    this.stage = new Stage();
    this.clock = new Clock();
    /* 
      Dynamically add event methods from the clock object (which has an event emitter built into it.)
      this array is the names of the methods that will be added to the events object
    */

    eventMethods = ["on", "off", "defer", "getEvents", "trigger", "remove"];
    this.events = {};
    for (_i = 0, _len = eventMethods.length; _i < _len; _i++) {
      name = eventMethods[_i];
      this.events[name] = this.clock[name];
    }
    this.displayLoading = function() {};
    this.init = function(options) {
      var config, that;
      config = $.getJSON((options || {}).config || "json/config.json");
      that = this;
      this.displayLoading(config);
      return config.complete(function() {
        try {
          this.config = $.parseJSON(config.responseText);
        } catch (e) {
          console.log(e);
          throw new Error("JSON was not parsed.");
        }
        configLoaded = true;
        console.log("Configuration Loaded.");
        that.displayLoading();
        if ((options || {}).autostart === true) {
          return that.start();
        }
      });
    };
    this.start = function() {
      var camera, renderer, scene;
      if (!configLoaded) {
        return;
      }
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);
      return this.renderer = renderer;
    };
    return this;
  };

  self.Engine = new ThreeTacticsEngine();

  Engine.init({
    "autostart": true
  });

  console.log(Engine);

}).call(this);

// Generated by CoffeeScript 1.5.0-pre
